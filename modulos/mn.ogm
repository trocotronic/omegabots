[modulo]
version=1.0.8
nombre=_nick
prefijo=mn
serv=NickServ
archivos=
ayuda=help\mn.h.ogm
conf=conf\mn.conf
autor=STeaL
mail=jkrst_@hotmail.com
url=http://www.rallados.net
creditos=Estos son los créditos específicos.
residente=#bots
activo=1
nick=NiCK
ident=NiCK
host=servicios.&red
realname=Servicio de gestión de nicks
modos=oOaANCdhrtvwBq

[comandos]
ayuda=help
help=help
register=reg
set=set
status=status
borrar=borrar
drop=drop
swhois=swhois
sendpass=send
getpass=get
info=info
list=list
ghost=recover
suspender=susp
liberar=susp
forbid=forbid
unforbid=unforbid
validar=valid
change=change
rename=rename
noexpire=noexpire

[fin]

on 1:signal:*: {
  if (!$readini($script,modulo,activo)) return
  var %g = $signal | goto %g
  :PRIVMSG | mn.privmsg | return
  :UMODE2 | _umode %parv[0] %parv[2] | return
  :NICK | mn.nick | return
  :QUIT | mn.quit $1- | return
  :B_MODE | mn.bmd $1- | return
  :AUTH_OK | mn.sockop | mn.des | return
  :%g | return
}
alias mn.sockop { var %nickh = $+($readini($script,modulo,nick),$chr(33),$readini($script,modulo,ident),$chr(64),$replace($readini($script,modulo,host),&red,$_.net)) 
  if (%nickh != $readini(tmp/ogm.tmp,services,nickserv)) { s.n %nickh | hbdd }
  writeini -n tmp/ogm.tmp services nickserv %nickh
}
alias mn.des { 
  if (!$readini(tmp/ogm.tmp,par,des)) { writeini -n tmp/ogm.tmp par des md5 | des }
}
alias mn.privmsg {
  if (%parv[2] != $readini($script,modulo,nick)) return
  if ($readini($script,comandos,%parv[3])) { $+($readini($script,modulo,prefijo),.,$readini($script,comandos,%parv[3])) | halt } 
  else { e 4 } 
}
alias mn.reg { 
  if (!$_.conf($script,registermail)) {
    if (!%parv[5]) { e 1 REGISTER pass tu@mail.com }
    if (!$regex(%parv[5],$_.conf($script,regmail))) { e 0 Mail incorrecto. }
    if ($chr(58) isincs %parv[4]) { e 0 Contraseña inválida. Carácter : no válido. }
    if ($chr(46) isincs %parv[4]) { e 0 Contraseña inválida. Carácter . no válido. }
    if ($calc($readini(tmp\ogm.tmp,nr,$_.get(%parv[0]).ip)+$_.conf($script,tempn)) > $ctime) { e 0 Debes esperar $duration($_.conf($script,tempn)) antes de efectuar otro registro. }
    else { remini tmp\ogm.tmp nr $_.get(%parv[0]).ip }
    if ($hget(%parv[0])) { e 0 Este nick ya está registrado. }
    if ($_conf(forb_mail,$gettok(%parv[5],2,64))) { e 0 No puedes registrar tu nick bajo una cuenta de correo gratuita. }
    if ($numtok($readini(tmp\ogm.tmp,nc,%parv[5]),44) > $_.conf($script,ncuenta)) { e 0 Actualmente tienes registrados $ifmatch nicks bajo la misma cuenta. No puedes registrar más. }
    writeini -n tmp\ogm.tmp nc %parv[5] $addtok($readini(tmp\ogm.tmp,nc,%parv[5]),%parv[0],44)
    writeini -n tmp\ogm.tmp nr $_.get(%parv[0]).ip $ctime
    hadd -m %parv[0] pass %parv[4] | hadd %parv[0] omail 1 | hadd %parv[0] mail %parv[5] | hadd %parv[0] oweb 1 | hadd %parv[0] web Sin web | hadd %parv[0] oreal 0 | hadd %parv[0] real $_.get(%parv[0]).realname
    hadd %parv[0] otime 0 | hadd %parv[0] oquit 0 | hadd %parv[0] modos r | hadd %parv[0] out $ctime | hadd %parv[0] id $ctime | hadd %parv[0] omask 1 | hadd %parv[0] mask $_.get(%parv[0]).userhost | hadd %parv[0] fecha $ctime
    if ($_.conf($script,sclav)) { hadd %parv[0] valid $_.clav($_.conf($script,clav)) | mail %parv[5] $+(Registro del nick: %parv[0],$chr(1),Para poder validar tu cuenta email,$chr(44), necesitas ejecutar el comando $upper($_.conf($script,clavcom)) con la siguiente clave:,$crlf,$crlf,$hget(%parv[0],valid),$crlf,$crlf,Una vez efectuada la validación con éxito,$chr(44), podrás usar todas las ventajas que te ofrece la red $_.net) }
    hadd %parv[0] m_lim 5 | hadd %parv[0] m_notif 3 | h %parv[0]
    r El nick12 %parv[0] se ha registrado bajo la cuenta12 %parv[5] | hadd -m +stats lastnick %parv[0] | hsave -bo +stats conf\stats.db
    if ($_IsUDB) { mn.migrarnick %parv[0] %parv[4] }
  } 
  if ($_.conf($script,registermail)) {
    if (!%parv[4]) { e 1 REGISTER tu@mail.com }
    if (!$regex(%parv[4],$_.conf($script,regmail))) { e 0 Mail incorrecto. }
    if ($calc($readini(tmp\ogm.tmp,nr,$_.get(%parv[0]).ip)+$_.conf($script,tempn)) > $ctime) { e 0 Debes esperar $duration($_.conf($script,tempn)) antes de efectuar otro registro. }
    else { remini tmp\ogm.tmp nr $_.get(%parv[0]).ip }
    if ($hget(%parv[0])) { e 0 Este nick ya está registrado. }
    if ($_conf(forb_mail,$gettok(%parv[4],2,64))) { e 0 No puedes registrar tu nick bajo una cuenta de correo gratuita. }
    if ($numtok($readini(tmp\ogm.tmp,nc,%parv[4]),44) > $_.conf($script,ncuenta)) { e 0 Actualmente tienes registrados $ifmatch nicks bajo la misma cuenta. No puedes registrar más. }
    writeini -n tmp\ogm.tmp nc %parv[4] $addtok($readini(tmp\ogm.tmp,nc,%parv[4]),%parv[0],44)
    writeini -n tmp\ogm.tmp nr $_.get(%parv[0]).ip $ctime
    hadd -m %parv[0] pass $_.clav($_.conf($script,clav)) | hadd %parv[0] omail 1 | hadd %parv[0] mail %parv[4] | hadd %parv[0] oweb 1 | hadd %parv[0] web Sin web | hadd %parv[0] oreal 0 | hadd %parv[0] real $_.get(%parv[0]).realname
    hadd %parv[0] otime 0 | hadd %parv[0] oquit 0 | hadd %parv[0] modos r | hadd %parv[0] out $ctime | hadd %parv[0] id $ctime | hadd %parv[0] omask 1 | hadd %parv[0] mask $_.get(%parv[0]).userhost | hadd %parv[0] fecha $ctime
    mail %parv[4] $+(Registro del nick: %parv[0],$chr(1),Registro de nick en $_.net,$crlf,$crlf,Los datos de registro de tu nick son:,$crlf,Nick: %parv[0],$crlf,Password: $hget(%parv[0],pass),$crlf,$crlf,Para identificarte -> /nick %parv[0] $+ : $+ $hget(%parv[0],pass),$crlf,Para cambiar la clave por otra que prefieras  -> /msg $hget(+bots,nickserv) SET PASS nueva_clave,$crlf,$crlf,Gracias por usar los servicios de $_.net)
    hadd %parv[0] m_lim 5 | hadd %parv[0] m_notif 3 | h %parv[0]
    r El nick12 %parv[0] se ha registrado bajo la cuenta12 %parv[4] | hadd -m +stats lastnick %parv[0] | hsave -bo +stats conf\stats.db
    if ($_IsUDB) { mn.migrarnick %parv[0] $hget(%parv[0],pass) }
    r Para completar tu registro deberás verificar la contraseña que hemos mandado a tu e-mail, junto con las instrucciones de uso.
  }
  k $_.serv $_.tok(SVSNICK) %parv[0] $_.clav($replace($_.conf(modulos\mn.ogm,recovnick),&nick,%parv[0])) $ctime 

}

alias mn.migrarnick { r.n $1 $2 | hbdd | hadd %parv[0] nick2 1 | h %parv[0]  }
alias mn.set {
  if (!%parv[5]) { e 1 SET opción valor }
  vu | var %g = %parv[4] | goto %g
  :email | if (!$regex(%parv[5],$_.conf($script,regmail))) { e 0 Mail incorrecto. } | hadd %parv[0] mail %parv[5] | r Valor de e-mail cambiado a12 %parv[5] . | goto escape
  :url | hadd %parv[0] web %parv[5] | r Valor de url cambiado a12 %parv[5] | goto escape
  :realname | hadd %parv[0] real $gettok(%parc,6-,32) | r Valor de realname cambiado a12 $gettok(%parc,6-,32) | goto escape
  :pass | hadd %parv[0] pass %parv[5] | set %parv[4] %parv[5] | r Valor de pass cambiado a12 %parv[4] | r.n %parv[0] %parv[4] | goto escape
  :kill | if (%parv[5] isnum $_.conf($script,killrange)) { hadd %parv[0] kill %parv[5] | r Valor de kill cambiado a12 %parv[5] } 
  elseif (%parv[5] == off) { hadd %parv[0] kill 0 | r Valor de kill 12desactivado } | else { e 2 SET kill tiempo/off. El tiempo debe estar comprendido entre $_.conf($script,killrange) segundos. }
  goto escape
  :hide
  set %parv[6] $upper(%parv[6])
  if (%parv[5] == email) { if (!$regex(%parv[6],^(ON|OFF)$)) { e 2 SET HIDE email on/off } | hadd %parv[0] omail $iif(%parv[6] == on,1,0) | r Valor de HIDE email cambiado a12 %parv[6] | goto escape }
  if (%parv[5] == url) { if (!$regex(%parv[6],^(ON|OFF)$)) { e 2 SET HIDE url on/off } | hadd %parv[0] oweb $iif(%parv[6] == on,1,0) | r Valor de HIDE url cambiado a12 %parv[6] | goto escape }
  if (%parv[5] == realname) { if (!$regex(%parv[6],^(ON|OFF)$)) { e 2 SET HIDE realname on/off } | hadd %parv[0] oreal $iif(%parv[6] == on,1,0) | r Valor de HIDE realname cambiado a12 %parv[6] | goto escape }
  if (%parv[5] == mask) { if (!$regex(%parv[6],^(ON|OFF)$)) { e 2 SET HIDE mask on/off } | hadd %parv[0] omask $iif(%parv[6] == on,1,0) | r Valor de HIDE mask cambiado a12 %parv[6] | goto escape }
  if (%parv[5] == time) { if (!$regex(%parv[6],^(ON|OFF)$)) { e 2 SET HIDE time on/off } | hadd %parv[0] otime $iif(%parv[6] == on,1,0) | r Valor de HIDE time cambiado a12 %parv[6] | goto escape }
  if (%parv[5] == quit) { if (!$regex(%parv[6],^(ON|OFF)$)) { e 2 SET HIDE quit on/off } | hadd %parv[0] oquit $iif(%parv[6] == on,1,0) | r Valor de HIDE quit cambiado a12 %parv[6] | goto escape }
  :%g | e 0 Opción incorrecta.
  :escape | h %parv[0]
}
alias mn.status { if (!%parv[4]) { e 1 STATUS nick } | r Status de12 %parv[4] $+ :12 $_.get(%parv[4]).status (12 $_.get($_.get(%parv[4]).status).tstatus ) }
alias mn.drop {
  vc 4 
  if ($_.get(%parv[0]).status < 4) { }
  else { 
    if (!%parv[4]) { e 1 DROP nick }
    if (!$hget(%parv[4])) { e 3 } 
    if ($_.get(%parv[0]).status <= $_.get(%parv[4]).status) && (%parv[4] != %parv[0]) { e 0 No puedes dropear nicks de igual o superior nivel al tuyo. }    
    mn.drp %parv[4] | r El nick12 %parv[4] ha sido dropeado 
} }
alias mn.borrar {
  vu | if ($_.get(%parv[0]).status < 4) { mn.drp %parv[0] | r Tu nick ha sido dropeado }
}
alias mn.swhois {
  vc 5
  if (!%parv[4]) { e 1 SWHOIS <nick> [swhois] }
  if (!$hget(%parv[4])) { e 3 }
  if (!$gettok(%parc,6-,32)) { 
    if (!$hget(%parv[4],swhois)) { r SWHOIS del nick12 %parv[4] eliminada. | da $+(12,%parv[0]) elimina el SWHOIS del nick12 $+(%parv[4],.) | halt }
  else { hdel %parv[4] swhois | n.swhois %parv[4] | r SWHOIS del nick12 %parv[4] eliminada. | da $+(12,%parv[0]) elimina el SWHOIS del nick12 $+(%parv[4],.) | halt } }
  if ($gettok(%parc,6-,32)) {
    if ($gettok(%parc,6-,32) == $hget(%parv[4],swhois)) { r SWHOIS12 $gettok(%parc,6-,32) para el nick12 %parv[4] añadida. | da $+(12,%parv[0]) añade el SWHOIS12 $gettok(%parc,6-,32) al nick12 $+(%parv[4],.) | halt }
  if ($gettok(%parc,6-,32) != $hget(%parv[4],swhois)) { hadd %parv[4] swhois $gettok(%parc,6-,32) | n.swhois %parv[4] $gettok(%parc,6-,32) | r SWHOIS12 $gettok(%parc,6-,32) para el nick12 %parv[4] añadida | da $+(12,%parv[0]) añade el SWHOIS12 $gettok(%parc,6-,32) al nick12 $+(%parv[4],.) | halt } }

}
alias mn.drp {
  var %i = $hfind($1,#*,0,w) | while (%i) { if (!$hget($1,$hfind($1,#*,%i,w))) { dec %i | continue } | hdel $hfind($1,#*,%i,w) + $+ $1 | h $hfind($1,#*,%i,w) | dec %i }
  if ($remtok($readini(tmp\ogm.tmp,nc,$hget($1,mail)),$1,44)) { writeini -n tmp\ogm.tmp nc $hget($1,mail) $ifmatch }
  else { remini tmp\ogm.tmp nc $hget($1,mail) }
  if ($_IsUDB) {
    if ($hget($1,nick2)) { d.n $1 }
    hbdd
  }
  var %i = $hget(0), %d, %t | while (%i) { 
    %t = $hget(%i)
    if ($left(%t,2) == +#) { if ($hget(%t,founder) == $1) { %d = %d %t } }
    if ($left(%t,1) == $chr(35)) { if ($hget(%t,founder) == $1) { hadd %t founder $hget(+bots,cregserv) | f.c %t $hget(+bots,cregserv) } }
    dec %i
  }
  var %i = $numtok(%d,32) | while (%i) { hfree $gettok(%d,%i,32) | dec %i }
  remini tmp\ogm.tmp nr $_.get($1).ip | remini conf\main.conf roots $1 | hdel +roots $1 | hfree $1
  .remove nicks\ $+ $_.32($1).cod 
}
alias mn.get { 
  vc 5 
  if ($_.get(%parv[0]).status <= $_.get(%parv[4]).status) { e 0 | do $+(12,%parv[0]) intenta 12GETPASS sobre el nick $+(12,%parv[4],.) }
  if (!%parv[4]) { e 1 GETPASS nick } | if (!$hget(%parv[4])) { e 3  } | r La clave de12 %parv[4] es12 $hget(%parv[4],pass) | do $+(12,%parv[0]) hace 12GETPASS sobre el nick $+(12,%parv[4],.)
}
alias mn.send {
  vc 5
  if (!%parv[4]) { e 1 SENDPASS nick }
  if (!$hget(%parv[4])) { e 3 }
  mail $hget(%parv[4],mail) $+(Recordatorio de la clave para el nick: %parv[4],$chr(1),La clave del nick %parv[4] es: $hget(%parv[4],pass),$crlf,$crlf,Gracias por utilizar los servicios de $_.net)
  r Clave enviada al e-mail de12 %parv[4]
}
alias mn.info {
  if (!%parv[4]) { e 1 INFO <nick> }
  if ($_.get(%parv[4]).bot) { r 12 $+ %parv[4] es un bot de servicios. | halt }
  if (!$hget(%parv[4])) { e 3 }
  r Información de12 %parv[4]
  if (!$hget(%parv[4],oreal) || (%parv[0] == %parv[4] && $_.get(%parv[0]).status > 2)) { r Realname:12 $hget(%parv[4],real) }
  r Registrado el12 $date($hget(%parv[4],fecha)) a las12 $time($hget(%parv[4],fecha))
  if ($hget(%parv[4],suspend)) { r Está suspendido. Motivo: $hget(%parv[4],suspend) }
  if (!$hget(%parv[4],omask) || (%parv[0] == %parv[4] && $_.get(%parv[0]).status > 2)) { r Mask:12 $hget(%parv[4],mask) }
  if ($_.get(%parv[4]).status < 3 && !$hget(%parv[4],otime)) { r Visto por última vez el12 $date($hget(%parv[4],out)) a las12 $time($hget(%parv[4],out)) }
  else if ($_.get(%parv[4]).status > 2 && !$hget(%parv[4],otime)) { r Este usuario está conectado. Use12 /whois %parv[4] para más información }
  if (!$hget(%parv[4],oquit) || (%parv[0] == %parv[4] && $_.get(%parv[0]).status > 2)) { r Último quit:12 $hget(%parv[4],quit) }
  if (!$hget(%parv[4],omail) || (%parv[0] == %parv[4] && $_.get(%parv[0]).status > 2)) { r E-mail:12 $hget(%parv[4],mail) }
  if (!$hget(%parv[4],oweb) || (%parv[0] == %parv[4] && $_.get(%parv[0]).status > 2)) { r Url:12 $hget(%parv[4],web) }
  if ($hget(%parv[4],kill)) { r Protección kill en12 $ifmatch segundos }
  if ($hget(%parv[4],oper)) { r Es un $ifmatch }
  if ($hget(+roots,%parv[4])) { r Es un Root }
  if ($hget(%parv[4],snomask)) && ($_.get(%parv[0]).status > 2) { r Usa las SNOMASK $+(12+,$hget(%parv[4],snomask),.) }
  if (%parv[0] == %parv[4] && $_.get(%parv[0]).status > 2) {
    r *** Lista de registros ***
    var %i = $hfind(%parv[4],#*,0,w) | while (%i) { if ($hget(%parv[4],$hfind(%parv[4],#*,%i,w)) || $hget($hfind(%parv[4],#*,%i,w))) { r Canal:12 $hfind(%parv[4],#*,%i,w) nivel:12 $hget(%parv[4],$hfind(%parv[4],#*,%i,w)) $iif($hget($hfind(%parv[4],#*,%i,w),founder) == %parv[4],(FOUNDER)) } | dec %i } | r *** Fin de lista ***
} }
alias mn.list {
  if (!%parv[4]) { e 1 LIST patrón }
  r *** Lista de nicks conectados que responden al patrón12 %parv[4] $+  *** | var %i = 1 | while ($hfind(+nicks,%parv[4],%i,w) && %i <= $_.conf($script,listflood)) { r Nick:12 $hfind(+nicks,%parv[4],%i,w) | inc %i }
  r Resultado:12 $calc(%i - 1) nicks de12 $hfind(+nicks,%parv[4],0,w)
}
alias mn.susp {
  vc 5 
  if (!$hget(%parv[4])) { e 0 Ese nick no está registrado. }
  if ($hget(%parv[4])) {
    if (%parv[3] == suspender) {
      if (!%parv[5]) { e 1 SUSPENDER <nick> <motivo> }
      if (%parv[5]) { hadd %parv[4] suspend $gettok(%parc,6-,32)
        if ($_IsUDB) { sus.n %parv[4] $gettok(%parc,6-,32)
          k $_.serv $_.tok(SVSNICK) %parv[4] $_.clav($replace($_.conf(modulos\mn.ogm,recovnick),&nick,%parv[4])) $ctime 
    r Nick12 %parv[4] 1suspendido. } } }
    if (%parv[3] == liberar) {
      if (!%parv[4]) { e 1 LIBERAR <nick> }
      if (%parv[4]) {  hdel %parv[4] suspend 
        if ($_IsUDB) { hbdd | lib.n %parv[4]
          k $_.serv $_.tok(SVSNICK) %parv[4] $_.clav($replace($_.conf(modulos\mn.ogm,recovnick),&nick,%parv[4])) $ctime 
    r Nick12 %parv[4] 1liberado. } } }
    h %parv[4]
  } 
}
alias mn.valid {
  if (!$_.conf($script,sclav)) { e 4 }
  if (!%parv[4]) { e 1 VALIDAR clave }
  if (!$hget(%parv[0],valid)) { e 0 Tu cuenta ya ha sido validada. }
  if ($hget(%parv[0],valid) != %parv[4]) { e 0 Clave incorrecta. }
  hdel %parv[0] valid | r Ok, su cuenta ha sido validada con éxito. Ya puedes proceder a la identificación.
}
alias mn.forbid {
  vc 6
  if (!%parv[5]) { r Sintaxis: FORBID <nick> <motivo> }
  else { 
    k $_.serv DB * INS $re(N) $+(N::,%parv[4],::B) $gettok(%parc,6-,32) | r El nick12 %parv[4] 1ha sido añadido a la lista de nicks prohibidos.
  da El nick12 %parv[4] 1ha sido añadido a la lista de nicks prohibidos por12 %parv[0] 1con motivo12 $+($gettok(%parc,6-,32),1). | inf.n }
} 
alias mn.unforbid {
  vc 6
  if (!%parv[4]) { e 0 Sintaxis: FORBID <nick> }
  else { 
    k $_.serv DB * DEL $re(N) $+(N::,%parv[4],::B) | r El nick12 %parv[4] 1ha sido eliminado de la lista de nicks prohibidos.
  da El nick12 %parv[4] 1ha sido eliminado de la lista de nicks prohibidos por12 $+(%parv[0],1). | inf.n }
} 
alias mn.rename {
  vc 7
  if (!%parv[5]) { e 1 RENAME <nick> <nuevonick> }
  if (!$hget(+nicks,%parv[4])) { e 0 Este nick no está conectado. }
  if ($hget(+nicks,%parv[5])) { e 0 Este nick está en uso. }
  k $_.serv $_.tok(SVSNICK) %parv[4] %parv[5] $ctime
  r El nick12 %parv[4] ha cambiado a12 %parv[5] | da $+(12,%parv[0]) 1ha cambiado el nick12 %parv[4] 1a12 $+(%parv[5],1).
}
alias mn.change {
  vc 4
  if (!%parv[4]) { e 1 CHANGE <nick> }
  if (!$hget(+nicks,%parv[4])) { e 0 Este nick no está conectado. }
  set %ir $_.clav($replace($_.conf(modulos\mn.ogm,recovnick),&nick,%parv[4]))
  if (!$hget(+nicks,%ir)) { set %ir $_.clav($replace($_.conf(modulos\mn.ogm,recovnick),&nick,%parv[4])) }
  k $_.serv $_.tok(SVSNICK) %parv[4] %ir $ctime 
  r El nick12 %parv[4] ha cambiado a12 %ir | do $+(12,%parv[0]) 1ha usado 12CHANGE1 sobre el nick12 %parv[4] 1y ha cambiado a12 $+(%ir,1). | unset %ir
}

alias mn.nick {
  var %n = $iif(%parv[0] == $_.tok(NICK),%parv[1],%parv[2])
  if ($_.get(%n).status < 3 && !$hget(%n,nick2)) {
    if ($hget(%n)) { k $readini($script,modulo,nick) $_.tok(PRIVMSG) %n :Este nick está registrado y protegido. Si es tu nick, escribe12 /msg $iif($_.conf($script,sid),$+($readini($script,modulo,nick),$chr(64),$_.serv),$readini($script,modulo,nick)) IDENTIFY pass $+ . Si no lo es,escoge otro nick. }
    if ($hget(%n,kill)) { k $readini($script,modulo,nick) $_.tok(PRIVMSG) %n :De no hacerlo, serás desconectad@ en12 $hget(%n,kill) segundos. | .timer $+ %n 1 $hget(%n,kill) mn.k %n }
} }
alias mn.bmd {
  var %i = $len($_conf(modes,users)), %u = $_.mode($2-).u, %d = $_.mode($2-).d | while (%i) { if ($mid($_conf(modes,users),%i,1) isincs %u) { var %s = %s $+ $ifmatch } | dec %i }
  if (%s) { k $readini($script,modulo,nick) $_.tok(SVS2MODE) $1 $+(-,%s) $ctime | k $readini($script,modulo,nick) $_.tok(NOTICE) $1 :No se permiten usar los modos12 %s en esta red. | _umode $1 - $+ %s }
  if (N isincs %u) || (h isincs %u) || (o isincs %u) { hadd +stats ircops $addtok($hget(+stats,ircops),$1,32) | hsave -bo +stats conf\stats.db }
  if ((N isincs %d || h isincs %d || o isincs %d) && $_.get($1).status < 5) { hadd +stats ircops $remtok($hget(+stats,ircops),$1,32) | hsave -bo +stats conf\stats.db }
  if ($hget($1,oper) == PreOper) { var %c = PREOperador | goto t }
  elseif (N isincs %u) { var %c = Root }
  elseif (a isincs %u) { var %c = ADMINistrador }
  elseif (h isincs %u) { var %c = OPERador }
  elseif (B isincs %u) { var %c = BoT }
  :t
  if (%c) { 
    do $+(12,$1) 1es ahora un12 %c 
    if ($_.conf($script,wallcop)) { k $_.serv $_.tok(WALLOPS) : $+ $1 se identifica como %c }
    if ($_conf(autos,opers)) && (%c != ADMINistrador) && (%c != Root)  { k $hget(+bots,chanserv) $_.tok(INVITE) $1 $_conf(autos,opers) } 
    if ($_conf(autos,operschat)) && (%c != PREOperador) { k $hget(+bots,chanserv) $_.tok(INVITE) $1 $_conf(autos,operschat) }
    if ($_conf(autos,admins)) && (%c == ADMINistrador)  || (%c == Root) { k $hget(+bots,chanserv) $_.tok(INVITE) $1 $_conf(autos,admins) }
    if ($_conf(autos,preos)) && (%c == PREOperador) { k $hget(+bots,chanserv) $_.tok(INVITE) $1 $_conf(autos,preos) }
    :y
} }

alias _umode {
  var %m = $_.mode($2).u, %i = $len(%m) | while (%i) { if ($mid(%m,%i,1) !isincs $_.get($1).modes) { var %s = %s $+ $ifmatch } | dec %i }
  var %m = $_.mode($2).d, %i = $len(%m) | while (%i) { if ($mid(%m,%i,1) isincs $_.get($1).modes) { var %u = %u $+ $ifmatch } | dec %i }
  hadd -m +nicks $1 $puttok($hget(+nicks,$1),$+($_.removecs($_.get($1).modes,%u),%s),5,32)
  if (r isincs %s) { .signal -n ID_OK }
  .signal -n B_MODE $1 $+(+,%s,-,%u)
}
alias mn.k {
  if ($_.conf($script,protkill) == nick) { k $_.serv $_.tok(SVSNICK) $1 $_.clav($replace($_.conf($script,recovnick),&nick,$1)) $ctime }
  if ($_.conf($script,protkill) == kill) { _kill $_.serv $1 $replace($_conf(blocks,nick),&nick,$1) }
}
alias _.get {
  var %p = $prop | goto %p
  :ident | return $gettok($hget(+nicks,$1),1,32)
  :ip | return $gettok($hget(+nicks,$1),2,32)
  :ipv | return $gettok($hget(+nicks,$1),3,32)
  :realname | return $gettok($hget(+nicks,$1),6-,32)
  :userhost | return $+($gettok($hget(+nicks,$1),1,32),$chr(64),$gettok($hget(+nicks,$1),2,32))
  :mask | return $+($1,$chr(33),$gettok($hget(+nicks,$1),1,32),$chr(64),$gettok($hget(+nicks,$1),2,32))
  :userhostv | if (x isincs $gettok($hget(+nicks,$1),5,32)) return $+($gettok($hget(+nicks,$1),1,32),$chr(64),$gettok($hget(+nicks,$1),3,32))
  else return $+($gettok($hget(+nicks,$1),1,32),$chr(64),$gettok($hget(+nicks,$1),2,32))
  :maskv | if (x isincs $gettok($hget(+nicks,$1),5,32)) return $+($1,$chr(33),$gettok($hget(+nicks,$1),1,32),$chr(64),$gettok($hget(+nicks,$1),3,32))
  else return $+($1,$chr(33),$gettok($hget(+nicks,$1),1,32),$chr(64),$gettok($hget(+nicks,$1),2,32))
  :modes | return $gettok($hget(+nicks,$1),5,32)
  :serv | return $gettok($hget(+nicks,$1),4,32)
  :oline | return $gettok($hget(+nicks,$1),4,32)
  :status
  if ($hfind(+bots,$1).data) return 9
  if (N isincs $gettok($hget(+nicks,$1),5,32) && $hget(+roots,$1)) { return 8 }
  if (N isincs $gettok($hget(+nicks,$1),5,32)) { return 7 }
  if (o isincs $gettok($hget(+nicks,$1),5,32)) { return 6 }
  if (h isincs $gettok($hget(+nicks,$1),5,32)) { return 5 }
  if ((r isincs $gettok($hget(+nicks,$1),5,32) && $hget($1,oper) == preoper) || P isincs $gettok($hget(+nicks,$1),5,32)) { return 4 }
  if (r isincs $gettok($hget(+nicks,$1),5,32)) { return 3 }
  if ($hget(+nicks,$1)) { return 2 }
  if ($hget($1)) { return 1 }
  return 0
  :bot
  if ($hfind(+bots,$1).data) return $1
  :tstatus | return $readini(conf\main.conf,levels,$1)
  :%p | return
}
alias _.clav {
  var %i = 1, %t | while (%i <= $len($1)) {
    var %s = $mid($1,%i,1) | goto %s
    :? | %t = %t $+ $rand(0,9) | inc %i | continue
    :º | %t = %t $+ $rand(A,Z) | inc %i | continue
    :! | %t = %t $+ $rand(a,z) | inc %i | continue
    :# | %t = %t $+ $iif($rand(0,1) == 1,$rand(a,z),$rand(A,Z)) | inc %i | continue
    :* | %t = %t $+ $iif($rand(0,1) == 1,$rand(0,9),$iif($rand(0,1) == 1,$rand(a,z),$rand(A,Z))) | inc %i | continue
    :%s | %t = %t $+ %s | inc %i | continue
  }
  return %t
}
alias _.mode {
  var %r = $2, %t = $3 | tokenize 32 $1
  var %i = 1, %uf = oakeLqlvhfb, %df = oakeLqvhfb, %m = 1 | while (%i <= $len($1)) {
    var %c = $mid($1,%i,1), %h = $asc(%c)
    if (%c == $chr(43)) { var %p = u | inc %i | continue }
    if (%c == $chr(45)) { var %p = d | inc %i | continue }
    var %s = $gettok($2-,%m,32)
    if (%p == u) { var %u = %u $+ %c | if (%c isincs %uf) { var %m.u. [ $+ [ %h ] ] %m.u. [ $+ [ %h ] ] %s | inc %m } }
    if (%p == d) { var %d = %d $+ %c | if (%c isincs %df) { var %m.d. [ $+ [ %h ] ] %m.d. [ $+ [ %h ] ] %s | inc %m } }
    inc %i
  }
  if (%t == 0) return $numtok(%m. [ $+ [ $left($prop,1) ] $+ ] . [ $+ [ $asc(%r) ] ],32)
  if (%t) return $gettok(%m. [ $+ [ $left($prop,1) ] $+ ] . [ $+ [ $asc(%r) ] ],%t,32)
  if (%r) { return %m. [ $+ [ $left($prop,1) ] $+ ] . [ $+ [ $asc(%r) ] ] } 
  return % [ $+ [ $left($prop,1) ] ]
}
alias _.removecs var %i = 1, %s = $1 | while (%i <= $len($2)) { %s = $removecs(%s,$mid($2,%i,1)) | inc %i } | return %s
alias mn.quit {
  if ($_.get(%parv[0]).status > 2 && $hget(%parv[0])) { hadd %parv[0] quit $gettok(%parc,2-,58) | hadd %parv[0] out $ctime }
}
alias h if ($hget($1)) hsave -bo $1 $iif($left($1,1) == $chr(35),canales\,nicks\) $+ $_.32($1).cod
alias hi if ($hget($1)) hsave -bo $1 ips\ $+ $_.32($1).cod
alias vu if ($_.get(%parv[0]).status < 3) { e 0 No estás identificado. }
alias vc if ($_.get(%parv[0]).status < $1) { e 0 Acceso denegado. }

alias k.proxy { if ($readini(conf\prox.conf,allow,$1)) { return } | k.debug Escaneando máquina $1 $+... | var %i = $ini(conf\prox.conf,port,0) | while (%i) { sock prox $+ $1 $+ $ini(conf\prox.conf,port,%i) $+ $rand(9,99999) $1 $ini(conf\prox.conf,port,%i) $1 $2 | dec %i } }
on 1:sockopen:prox*: {
  var %p = $gettok($sock($sockname).mark,1,9), %n = $gettok($sock($sockname).mark,2,9)
  if (!$sockerr) { set %prox_ [ $+ [ %p ] ] %prox_ [ $+ [ %p ] ] $sock($sockname).port }
  sockclose $sockname | if (!$sock(prox [ $+ [ %p ] $+ ] *)) {
    if ($hget(+bots,scanserv)) { k $ifmatch $_.tok(NOTICE) %n :Scan finalizado. }
    if (%prox_ [ $+ [ %p ] ]) { _tkl + G * %p $readini(conf\main.conf,blocks,proxy_t) $replace($readini(conf\main.conf,blocks,proxy),&n,$ifmatch) }
    unset %prox_ [ $+ [ %p ] ] 
} }
alias mn.a.drop { var %i = $findfile(nicks\,*,0), %s | while (%i) { 
    var %f = $_.32($nopath($findfile(nicks\,*,%i))).uncod, %n = $calc($hget(%f,id)+$_conf(drop,n_time)) | if ($left(%f,1) == + || !$hget(%f,id) || !$_conf(drop,n_time) || !%n) { dec %i | continue } 
    if (%n < $ctime) { %s = %s %f } | dec %i
  }
  if (%s) { %i = $numtok(%s,32) | while (%i) { mn.drp $gettok(%s,%i,32) | dec %i } }
}
alias mn.a.ref {
  var %i = $ini(tmp\ogm.tmp,nr,0), %s | while (%i) {
    if ($calc($ini(tmp\ogm.tmp,nr,%i)+$_.conf($script,tempn)) < $ctime) { %s = %s $ini(tmp\ogm.tmp,nr,%i) }
    dec %i
  }
  if (%s) { var %i = $numtok(%s,32) | while (%i) { remini tmp\ogm.tmp nr $gettok(%s,%i,32) | dec %i } }
}
